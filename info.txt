섹션 1: Course Introduction
----------------------------------------
1. Introduction

+ Lambda % Functional Interfaces
  - Practicing and Writing Lambda
  - Predefined Functional Interfaces
  - Method and Constructor Reference
  - Optional
  
+ Functional Programming -Concept & Techniques
  - Pure Functions
  - High Order Functions
  - Referential Transparency
  - Composition - Chaining - Closure
  - Currying
  - Tail Call Optimization
  
+ Design Pattern 
  - In Functional Way
  
+ Streams
  + Collectors
    - List<E>
    - Map<K,V>
    - Set<E>
    
+ Reactive Programming
  - Fundamentals behind reactive programming
  - RxJava3
  - Observables - Observers
  - RxJava Operators
  - Schedulers
  - Flowable and Backpressure
      
----------------------------------------
섹션 2: Why Functional Programming and Why to Bother
----------------------------------------
2. Why to Learn Functional Programming

- 1. What to do rather than how to do
- 2. Code is concise and Simple
- 3. Lses error prone
- 4. Add to you skill set
----------------------------------------
3. Course Resources
----------------------------------------
섹션 3: Lambda and Functional Interface
----------------------------------------
4. Introduction
----------------------------------------
5. First Cute Lambda

+ Implementing Runnable Interface
  - Extending the Thread Class
 
+ Function Properties
  - Name of the function
  - Parameters list
  - Body of the function
  - Return type 
----------------------------------------
6. Functional Interfaces

- Functional interface Behind every Lambda
+ Functional Interface
  - Interface having single abstract method.

----------------------------------------
7. How Lambda Works Under the Hood

- java -c ~~~.class

- Lamdas: Type Inference and Invokedynamic

----------------------------------------
8. Imperative V/s Declarative

- Pass Behaviour as Parameter
+ Declarative programming
  - where the Programmer says what to do rather then how to do
----------------------------------------
9. Summary
----------------------------------------
섹션 4: Practice Lambda with different signatures
----------------------------------------
10. Introduction
----------------------------------------
11. Practice Lambda - 1
----------------------------------------
12. Practice Lambda - 2
----------------------------------------
13. Practice Lambda - 3
----------------------------------------
14. Practice Lambda - 4
----------------------------------------
15. Summary
----------------------------------------
섹션 5: Predefined Functional Interfaces and Practice
----------------------------------------
16. Introduction
----------------------------------------
17. Predefined Functional Interfaces
----------------------------------------
18. Generic Functional Interfaces
----------------------------------------
19. Predicate
----------------------------------------
20. Consumer
----------------------------------------
21. Supplier
----------------------------------------
22. Function
----------------------------------------
23. UnaryOperator
----------------------------------------
24. BiFunction
----------------------------------------
25. BinaryOperator
----------------------------------------
26. Summary
----------------------------------------
섹션 6: Method and Constructor Reference
----------------------------------------
27. Introduction
----------------------------------------
28. Method Reference
----------------------------------------
29. Constructor Reference
----------------------------------------
30. Summary
----------------------------------------
섹션 7: Optional for Null Pointer
----------------------------------------
31. Introduction
----------------------------------------
32. Dangers of Null
----------------------------------------
33. Introducing Optional
----------------------------------------
34. Getting the values Back
----------------------------------------
35. Operators Part - 1
----------------------------------------
36. Operators Part - 2
----------------------------------------
37. Summary
----------------------------------------
섹션 8: Functional Programming in Depth
----------------------------------------
38. Introduction
----------------------------------------
39. What is Functional Programming
----------------------------------------
40. Functional Programming Concepts
----------------------------------------
41. Functions as First class Citizens
----------------------------------------
42. No Side Effects - Pure Functions
----------------------------------------
43. Higher Order Functions
----------------------------------------
44. Referencial Transparency
----------------------------------------
45. Functional Programming Techniques
----------------------------------------
46. Designing APIs In Functional Way
----------------------------------------
47. Chaining
----------------------------------------
48. Composition
----------------------------------------
49. Closures
----------------------------------------
50. Currying
----------------------------------------
51. Lazy Evaluation
----------------------------------------
52. Tail Call Optimisation  aka TCO
----------------------------------------
53. Summary
----------------------------------------
섹션 9: Design Patterns in Functional Way
----------------------------------------
54. Introduction
----------------------------------------
55. Iterator Design Pattern
----------------------------------------
56. Strategy Design Pattern
----------------------------------------
57. Decorator Design Pattern
----------------------------------------
58. Creating Fluent Interfaces
----------------------------------------
59. Factory Method Pattern
----------------------------------------
60. Builder Design Pattern
----------------------------------------
61. Command Design Pattern
----------------------------------------
62. Summary
----------------------------------------
섹션 10: Streams and Parallel Streams in depth
----------------------------------------
63. Introduction
----------------------------------------
64. Streams Introduction
----------------------------------------
65. Observing the Stream
----------------------------------------
66. Stream Pipeline
----------------------------------------
67. Streams are not data Containers
----------------------------------------
68. Filter Operations
----------------------------------------
69. Map Operations
----------------------------------------
70. Reduce Operations
----------------------------------------
71. Streams are Lazy
----------------------------------------
72. Numeric Streams
----------------------------------------
73. Numeric Streams - Methods
----------------------------------------
74. Bounded Streams
----------------------------------------
75. Infinite Streams
----------------------------------------
76. Stream.of and FlatMap
----------------------------------------
77. Parallel Streams
----------------------------------------
78. Stateless and stateful operations
----------------------------------------
79. Setting Parallelism
----------------------------------------
80. Summary and BrainMapping
----------------------------------------
섹션 11: Creating Streams from Custom Source and Understanding  Spliterator Pattern
----------------------------------------
81. Introduction
----------------------------------------
82. What Is Spliterator
----------------------------------------
83. Spliterator Characteristics
----------------------------------------
84. Custom Spliterator
----------------------------------------
85. Summary
----------------------------------------
섹션 12: Collectors for Data Processing in Depth
----------------------------------------
86. Introduction
----------------------------------------
87. What are Collectors
----------------------------------------
88. Terminal Analogous Collectors-1
----------------------------------------
89. Terminal Analogous Collectors-2
----------------------------------------
90. Terminal Analogous Collectors-3
----------------------------------------
91. Downstream Collectors
----------------------------------------
92. Cascading Collectors
----------------------------------------
93. Summary
----------------------------------------
섹션 13: Creating Your Own Collectors
----------------------------------------
94. Introduction
----------------------------------------
95. How Collectors Works Internally
----------------------------------------
96. Creating Your Own Collectors - 1
----------------------------------------
97. Creating Your Own Collectors - 2
----------------------------------------
98. Summary
----------------------------------------
섹션 14: Playing with Collections and Map in Functional style
----------------------------------------
99. Introduction
----------------------------------------
100. List
----------------------------------------
101. Set
----------------------------------------
102. Map
----------------------------------------
103. Summary
----------------------------------------
섹션 15: Data Structures Functional Way
----------------------------------------
104. Introduction
----------------------------------------
105. Functional Data Structure - What and why
----------------------------------------
106. List
----------------------------------------
107. Queue
----------------------------------------
108. Tree
----------------------------------------
109. Map
----------------------------------------
110. Summary
----------------------------------------
섹션 16: Reactive Programming an Introduction
----------------------------------------
111. Introduction
----------------------------------------
112. Reactive Manifesto
----------------------------------------
113. Fundamentals 1 - Sync Vs Async
----------------------------------------
114. Fundamentals 2 - CallBack Hell
----------------------------------------
115. Fundamentals 3 - Push vs Pull
----------------------------------------
116. Fundamentals 4 - Observer Design Pattern
----------------------------------------
117. Fundamentals 5 - Concurrency and Parallel programming
----------------------------------------
118. RxJava BIG Picture : How It Solves The Problem And Achieve Reactive manifesto
----------------------------------------
119. RxJava Reactive Streams
----------------------------------------
120. Summary
----------------------------------------
섹션 17: Hello - RxJava
----------------------------------------
121. Introduction
----------------------------------------
122. Setting Up RxJava 3.0
----------------------------------------
123. Hello - RxJava
----------------------------------------
124. Summary
----------------------------------------
섹션 18: The Observable and the Observers
----------------------------------------
125. Introduction
----------------------------------------
126. Observable-Observer
----------------------------------------
127. Creating Observable
----------------------------------------
128. Creating Observer
----------------------------------------
129. Hot and Cold Observables
----------------------------------------
130. Connectable Observables
----------------------------------------
131. Observable Variants
----------------------------------------
132. dispose()
----------------------------------------
133. Summary
----------------------------------------
섹션 19: RxJava Operators
----------------------------------------
134. Introduction
----------------------------------------
135. What Are Operators?
----------------------------------------
136. Types Of Operator
----------------------------------------
137. Operators In Action
----------------------------------------
138. Summary
----------------------------------------
섹션 20: Combining RxJava 3 Observables
----------------------------------------
139. Introduction
----------------------------------------
140. Merging and concatenating
----------------------------------------
141. flatMap() V/s concatMap()
----------------------------------------
142. Disposing Of Duplicate Emitting Sources : amb()
----------------------------------------
143. zip() V/s combineLatest()
----------------------------------------
144. Grouping And Grouped Observable
----------------------------------------
145. Summary
----------------------------------------
섹션 21: Concurrency And Parallelization
----------------------------------------
146. Introduction
----------------------------------------
147. How To ?
----------------------------------------
148. Schedulers
----------------------------------------
149. subscribeOn()
----------------------------------------
150. observeOn()
----------------------------------------
151. flatMap() To Achieve Concurrency
----------------------------------------
152. Summary
----------------------------------------
섹션 22: Subjects, Replaying and Caching in RxJava 3.x
----------------------------------------
153. Introduction
----------------------------------------
154. Replaying and Caching
----------------------------------------
155. Subjects
----------------------------------------
156. Adding Emissions Using Subject
----------------------------------------
157. Subject Implementations
----------------------------------------
158. Summary
----------------------------------------
섹션 23: Buffering, Throttling and Switching
----------------------------------------
159. Introduction
----------------------------------------
160. Buffer and Window
----------------------------------------
161. Throttle Operator
----------------------------------------
162. SwitchMap()
----------------------------------------
163. Summary
----------------------------------------
섹션 24: Flowable and BackPressure - Reactive Streams Implementation
----------------------------------------
164. Introduction
----------------------------------------
165. Producer-Consumer Problem - Need Of Backpressure
----------------------------------------
166. BackPressure With Flowable-Subscriber
----------------------------------------
167. Creation And BackPressure Strategies
----------------------------------------
168. Flowable Vs Observable
----------------------------------------
169. Summary
----------------------------------------
섹션 25: Appendix- Object Oriented Design Patterns
----------------------------------------
170. Iterator Design Pattern
----------------------------------------
171. Strategy Design Pattern
----------------------------------------
172. Decorator Design Pattern
----------------------------------------
173. Builder Design Pattern
----------------------------------------
174. Factory Design Pattern
----------------------------------------
175. Command Design Pattern
----------------------------------------
176. Observer Design Pattern
----------------------------------------
섹션 26: Appendix - Java Generics BONUS COURSE
----------------------------------------
177. Making you Familiar
----------------------------------------
178. Generic Type - Interfaces
----------------------------------------
179. Subclassing
----------------------------------------
180. Collections with Generics
----------------------------------------
181. Raw Type
----------------------------------------
182. Multiple Type Parameters
----------------------------------------
183. SubTyping
----------------------------------------
184. Generic Methods
----------------------------------------
185. Bounded Type Parameters
----------------------------------------
186. Wild Cards , and Upper Bound Wild Cards
----------------------------------------
187. Lower Bounded Wild Cards
----------------------------------------
188. Restrictions with wild cards
----------------------------------------
189. Behaviours in Generic and Non Generics Area
----------------------------------------
190. Type Erasure
----------------------------------------
191. Summary
----------------------------------------
섹션 27: Summary and Thank you
----------------------------------------
192. Thank you
----------------------------------------
